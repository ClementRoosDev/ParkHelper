using System.Collections.Generic;

namespace ParkHelper.Common.WebService.TSP
{
    public class TSPSearch
    {
        private static TspEnvironment _tspEnvironment2;
        public int[] BestSol;

        public static int[] GetBestNeighbour(TabuList tabuList,
            TspEnvironment tspEnviromnet,
            int[] initSolution)
        {


            var bestSol = new int[initSolution.Length]; //this is the best Solution So Far
            bestSol = Arraycopy(initSolution, 0, 0, bestSol.Length);
            var bestCost = tspEnviromnet.GetObjectiveFunctionValue(initSolution);
            var city1 = 0;
            int city2 = 0;
            var firstNeighbor = true;

            for (var i = 1; i < bestSol.Length - 1; i++)
            {
                for (var j = 2; j < bestSol.Length - 1; j++)
                {
                    if (i == j)
                    {
                        continue;
                    }

                    var newBestSol = new int[bestSol.Length]; //this is the best Solution So Far
                    newBestSol = Arraycopy(bestSol, 0, 0, newBestSol.Length);

                    newBestSol = SwapOperator(i, j, initSolution); //Try swapping cities i and j
                                                                   // , maybe we get a bettersolution
                    var newBestCost = tspEnviromnet.GetObjectiveFunctionValue(newBestSol);



                    if ((newBestCost > bestCost || firstNeighbor) && _tspEnvironment2.Distances[i][j] == 0)
                    { //if better move found, store it
                        firstNeighbor = false;
                        city1 = i;
                        city2 = j;
                        bestSol = Arraycopy(newBestSol, 0, 0, newBestSol.Length);
                        bestCost = newBestCost;
                    }


                }
            }

            if (city1 != 0)
            {
                tabuList.decrementTabu();
                tabuList.tabuMove(city1, city2);
            }
            return bestSol;
        }

        //swaps two cities
        public static int[] SwapOperator(int city1, int city2, int[] solution)
        {
            int temp = solution[city1];
            solution[city1] = solution[city2];
            solution[city2] = temp;
            return solution;
        }

        internal void Search(int[] currSolution)
        {
            _tspEnvironment2 = new TspEnvironment
            {
                Distances = new[]
                {
                    new[] {0,2,5,2,2,2,4,8,10,9,10,4,5,5,6,7,9,8,7,6,6,7,3,7,5,7,4,6,7,2,7,5,6,7,9,7,7,7,7,7,6,5,6,6,7,6,4,5,4,5,6,7,4,5,7,6,7,8},
                    new[] {2,0,5,3,2,2,4,9,11,10,11,4,5,5,6,7,9,8,7,6,6,7,3,7,5,7,4,6,6,2,7,5,6,7,10,7,7,7,7,7,6,5,6,6,7,6,4,4,4,5,5,5,4,5,7,6,5,8},
                    new[] {5,5,0,6,6,6,7,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,6,6,6,6,6,5,7,7,7,10,10,3,3,3,3,3,3,4,4,4,4,5,5,5,5,5,5,6,6,6,4,4,4,4},
                    new[] {2,3,6,0,3,3,6,10,12,8,9,6,5,5,6,7,9,8,7,6,6,7,3,7,5,7,6,7,6,2,7,5,6,7,8,7,7,4,7,7,7,6,7,7,8,7,4,4,4,4,6,7,4,5,7,7,7,8},
                    new[] {2,2,6,3,0,2,6,8,10,11,12,6,6,6,7,7,9,8,7,6,6,7,3,7,5,7,4,6,6,2,7,5,6,7,9,7,7,7,7,7,7,6,7,7,8,7,6,4,4,5,5,6,4,5,7,7,6,8},
                    new[] {2,2,6,3,2,0,3,8,10,10,11,6,6,6,7,8,10,9,8,7,7,8,3,7,5,7,4,6,7,2,7,5,6,7,8,7,7,7,7,41,7,6,7,7,8,7,4,4,4,4,5,6,4,5,7,7,6,8},
                    new[] {4,4,7,6,6,3,0,5,7,2,2,4,7,7,8,10,12,11,10,9,9,8,5,9,7,9,6,8,8,4,9,7,8,8,12,10,10,10,10,5,11,10,11,11,12,11,6,7,6,7,7,8,6,7,10,11,8,9},
                    new[] {8,9,5,10,8,8,5,0,2,2,2,3,4,3,4,5,7,6,5,4,4,5,5,4,8,10,7,9,9,3,10,8,9,10,11,5,5,5,5,5,6,7,6,6,7,6,3,3,3,3,3,4,3,3,6,6,4,2},
                    new[] {10,11,5,12,10,10,7,2,0,2,2,3,4,3,4,5,6,5,5,4,4,5,5,4,8,10,7,9,10,3,10,8,9,10,11,5,5,5,5,5,6,7,6,6,7,6,3,3,3,4,5,5,3,3,6,6,5,4},
                    new[] {9,10,5,8,11,10,2,2,2,0,2,3,3,4,3,5,7,5,4,4,4,4,5,4,8,10,7,10,9,3,10,8,9,4,10,5,5,5,5,5,6,7,6,6,7,6,3,3,3,4,4,5,3,3,6,6,5,5},
                    new[] {10,11,5,9,12,11,2,2,2,2,0,3,3,4,3,4,4,4,4,4,4,4,4,4,7,9,7,8,9,3,9,8,9,10,11,5,5,5,5,5,6,7,6,6,7,6,1,3,3,3,5,5,3,4,6,6,5,15},
                    new[] {4,4,5,6,6,6,4,3,3,3,3,0,3,4,3,5,5,4,4,4,4,4,4,4,8,10,7,9,8,3,10,8,9,13,14,5,5,5,5,5,6,7,6,6,7,6,3,4,3,3,3,4,3,3,7,6,4,6},
                    new[] {5,5,5,5,6,6,7,4,4,3,3,3,0,4,3,4,4,3,3,4,4,3,4,4,5,7,4,6,6,3,7,5,6,7,8,5,5,5,5,5,6,7,6,6,7,6,3,3,3,4,2,2,3,3,6,6,2,7},
                    new[] {5,5,5,5,6,6,7,3,3,4,4,4,4,0,3,4,4,3,3,3,3,3,4,3,5,7,4,6,7,4,7,5,6,7,8,5,5,5,5,5,6,7,6,6,7,6,3,3,3,3,3,4,3,3,6,6,4,7},
                    new[] {6,6,5,6,7,7,8,4,4,3,3,3,3,3,0,3,3,2,3,2,2,3,4,3,5,7,5,6,6,4,7,5,6,7,8,5,5,5,5,5,6,7,6,6,7,6,3,3,3,3,5,5,3,3,6,6,5,7},
                    new[] {7,7,4,7,7,8,10,5,5,5,4,5,4,4,3,0,3,2,2,2,2,2,5,3,7,9,6,9,7,4,9,6,7,8,9,3,3,3,3,3,7,6,7,7,8,7,3,3,3,3,3,5,3,4,7,7,4,5},
                    new[] {9,9,4,9,9,10,12,7,6,7,4,5,4,4,3,3,0,2,2,2,2,2,5,3,7,9,6,8,9,5,9,6,7,8,9,3,3,3,3,3,7,6,7,7,8,7,3,3,3,4,4,4,3,3,7,7,4,7},
                    new[] {8,8,4,8,8,9,11,6,5,5,4,4,3,3,2,2,2,0,2,2,2,2,5,3,6,8,5,7,7,5,8,6,7,8,9,3,3,3,3,3,7,6,7,7,8,7,3,3,3,3,3,3,3,3,7,7,3,9},
                    new[] {7,7,4,7,7,8,10,5,5,4,4,4,3,3,3,2,2,2,0,2,2,2,5,2,6,8,5,8,7,5,8,6,7,9,10,3,3,3,3,3,7,6,7,7,8,7,3,5,3,3,5,5,3,2,7,7,5,12},
                    new[] {6,6,4,6,6,7,9,4,4,4,4,4,4,3,2,2,2,2,2,0,2,2,5,2,6,8,5,7,8,5,8,6,7,8,9,3,3,3,3,3,7,6,7,7,8,7,3,3,3,3,3,3,3,3,8,7,3,6},
                    new[] {6,6,4,6,6,7,9,4,4,4,4,4,4,3,2,2,2,2,2,2,0,2,5,2,7,9,6,8,8,5,9,6,7,8,9,3,3,3,3,3,7,6,7,7,8,7,3,3,3,4,4,4,3,3,7,7,4,5},
                    new[] {7,7,4,7,7,8,8,5,5,4,4,4,3,3,3,2,2,2,2,2,2,0,5,2,8,10,7,9,9,5,10,8,9,8,9,3,3,4,3,3,7,5,7,7,8,7,3,3,3,3,3,3,3,3,7,7,3,6},
                    new[] {3,3,3,3,3,3,5,5,5,5,4,4,4,4,4,5,5,5,5,5,5,5,0,2,6,8,5,8,7,5,8,6,7,6,7,3,3,3,3,3,7,5,7,7,8,7,3,3,3,3,5,5,3,4,7,7,5,12},
                    new[] {7,7,4,7,7,7,9,4,4,4,4,4,4,3,3,3,3,3,2,2,2,2,2,0,5,7,5,6,6,5,7,6,7,6,7,3,3,3,3,3,7,7,7,7,8,7,3,3,3,3,3,3,3,3,7,7,3,5},
                    new[] {5,5,6,5,5,5,7,8,8,8,7,8,5,5,5,7,7,6,6,6,7,8,6,5,0,3,2,3,2,4,3,3,4,5,6,7,7,7,7,7,2,3,2,2,3,2,4,4,4,4,4,5,4,4,2,2,5,5},
                    new[] {7,7,6,7,7,7,9,10,10,10,9,10,7,7,7,9,9,8,8,8,9,10,8,7,3,0,2,2,3,7,5,3,4,5,6,7,7,7,7,7,3,4,3,3,4,3,4,4,4,5,5,5,4,4,3,3,5,5},
                    new[] {4,4,6,4,4,4,6,7,7,7,7,7,4,4,5,6,6,5,5,5,6,7,5,5,2,2,0,2,2,5,4,4,5,7,8,7,7,7,7,7,2,3,2,2,3,2,4,4,4,4,4,5,4,4,2,2,5,17},
                    new[] {6,6,6,7,6,6,8,9,9,10,8,9,6,6,6,9,8,7,8,7,8,9,8,6,3,2,2,0,2,5,4,3,4,5,6,7,7,7,7,7,4,5,4,4,5,4,3,3,3,3,3,3,3,3,4,4,3,15},
                    new[] {7,6,6,6,6,7,8,9,10,9,9,8,6,7,6,8,9,7,7,8,8,9,7,6,2,3,2,2,0,6,4,4,5,5,6,7,7,7,7,7,4,5,4,4,5,4,4,4,4,5,5,5,4,4,4,4,5,14},
                    new[] {2,2,5,2,2,2,4,3,3,3,3,3,3,4,4,4,5,5,5,5,5,5,5,5,4,7,5,5,6,0,4,4,5,9,10,5,5,5,5,5,4,6,4,4,5,4,4,4,4,5,6,7,4,4,3,4,7,13},
                    new[] {7,7,7,7,7,7,9,10,10,10,9,10,7,7,7,9,9,8,8,8,9,10,8,7,3,5,4,4,4,4,0,3,3,6,7,8,8,8,8,8,5,6,5,5,6,5,4,4,4,5,5,5,4,4,5,5,5,9},
                    new[] {5,5,7,5,5,5,7,8,8,8,8,8,5,5,5,6,6,6,6,6,6,8,6,6,3,3,4,3,4,4,3,0,3,8,9,7,7,7,7,7,5,6,5,5,6,5,5,5,5,5,5,6,5,5,5,5,6,8},
                    new[] {6,6,7,6,6,6,8,9,9,9,9,9,6,6,6,7,7,7,7,7,7,9,7,7,4,4,5,4,5,5,3,3,0,4,5,7,7,7,7,7,5,6,5,5,6,5,5,5,5,6,6,6,5,5,5,5,6,17},
                    new[] {7,7,10,7,7,7,8,10,10,9,10,13,7,7,7,8,8,8,9,8,8,8,6,6,5,5,7,5,5,9,6,8,4,0,3,10,10,10,10,10,3,4,3,3,4,3,7,7,7,7,7,8,7,7,3,3,8,3},
                    new[] {9,10,10,8,9,8,12,11,11,10,11,14,8,8,8,9,9,9,10,9,9,9,7,7,6,6,8,6,6,10,7,9,5,3,0,11,11,11,11,11,3,4,3,3,4,3,7,7,7,7,8,8,7,7,3,3,8,4},
                    new[] {7,7,3,7,7,7,10,5,5,5,5,5,5,5,5,3,3,3,3,3,3,3,3,3,7,7,7,7,7,5,8,7,7,10,11,0,2,2,2,2,7,8,7,7,8,7,3,3,3,5,5,5,3,3,7,7,5,20},
                    new[] {7,7,3,7,7,7,10,5,5,5,5,5,5,5,5,3,3,3,3,3,3,3,3,3,7,7,7,7,7,5,8,7,7,10,11,2,0,2,2,2,7,8,7,7,8,7,3,3,3,3,3,3,3,3,7,7,3,20},
                    new[] {7,7,3,7,7,7,10,5,5,5,5,5,5,5,5,3,3,3,3,3,3,3,3,3,7,7,7,7,7,5,8,7,7,10,11,2,2,0,2,2,7,8,7,7,8,7,3,3,3,3,3,3,3,3,6,7,3,6},
                    new[] {7,7,3,7,7,7,10,5,5,5,5,5,5,5,5,3,3,3,3,3,3,3,3,3,7,7,7,7,7,5,8,7,7,10,11,2,2,2,0,2,7,8,7,7,8,7,3,3,3,5,6,6,3,3,7,7,6,12},
                    new[] {7,7,3,7,7,7,10,5,5,5,5,5,5,5,5,3,3,3,3,3,3,3,3,3,7,7,7,7,7,5,8,7,7,10,11,2,2,2,2,0,7,8,7,7,8,7,3,3,3,3,3,3,3,3,7,7,3,15},
                    new[] {6,6,3,7,7,7,11,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,2,3,2,4,4,4,5,5,5,3,3,7,7,7,7,7,0,2,2,2,2,2,3,3,3,3,4,4,3,3,4,7,4,5},
                    new[] {5,5,4,6,6,6,10,7,7,7,7,7,7,7,7,6,6,6,6,6,6,5,5,7,3,4,3,5,5,5,6,6,6,4,4,8,8,8,8,8,2,0,2,2,2,2,2,2,2,3,3,3,2,2,4,5,3,3},
                    new[] {6,6,4,7,7,7,11,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,2,3,2,4,4,4,5,5,5,3,3,7,7,7,7,7,2,2,0,2,2,2,2,2,2,2,2,2,2,3,4,5,2,2},
                    new[] {6,6,4,7,7,7,11,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,2,3,2,4,4,4,5,5,5,3,3,7,7,7,7,7,2,2,2,0,2,2,2,2,2,2,3,3,2,2,4,6,3,9},
                    new[] {7,7,4,8,8,8,12,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,3,4,3,5,5,5,6,6,6,4,4,8,8,8,8,8,2,2,2,2,0,2,2,2,2,2,2,2,3,2,3,4,3,5},
                    new[] {6,6,5,7,7,7,11,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,2,3,2,4,4,4,5,5,5,3,3,7,7,7,7,7,2,2,2,2,2,0,2,2,2,2,2,2,2,2,3,4,2,7},
                    new[] {4,4,5,4,4,4,6,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,3,4,4,4,5,5,7,7,3,3,3,3,3,3,2,2,2,2,2,0,2,2,2,2,2,2,2,3,4,2,8},
                    new[] {5,4,5,4,4,4,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,3,4,4,4,5,5,7,7,3,3,3,3,3,3,2,2,2,2,2,2,0,2,2,3,3,2,3,3,3,3,6},
                    new[] {4,4,5,4,4,4,6,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,3,4,4,4,5,5,7,7,3,3,3,3,3,3,2,2,2,2,2,2,2,0,2,2,2,2,2,2,3,3,6},
                    new[] {5,5,5,4,5,4,7,3,4,4,3,3,4,3,3,3,4,3,3,3,4,3,3,3,4,5,4,3,5,5,5,5,6,7,7,5,3,3,5,3,3,3,2,2,2,2,2,2,2,0,2,2,3,2,2,2,3,6},
                    new[] {6,5,5,6,5,5,7,3,5,4,5,3,2,3,5,3,4,3,5,3,4,3,5,3,4,5,4,3,5,6,5,5,6,7,8,5,3,3,6,3,4,3,2,3,2,2,2,3,2,2,0,2,2,2,2,3,3,2},
                    new[] {7,5,6,7,6,6,8,4,5,5,5,4,2,4,5,4,4,3,5,3,4,3,5,3,5,5,5,3,5,7,5,6,6,8,8,5,3,3,6,3,4,3,2,3,2,2,2,3,2,2,2,0,2,2,2,2,2,2},
                    new[] {4,4,6,4,4,4,6,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,3,4,4,4,5,5,7,7,3,3,3,3,3,3,2,2,2,3,2,2,2,2,3,2,2,0,2,2,2,2,2},
                    new[] {5,5,6,5,5,5,7,3,3,3,4,3,3,3,3,4,3,3,3,3,3,3,4,3,4,4,4,3,4,4,4,5,5,7,7,3,3,3,3,3,3,2,3,2,2,2,2,3,2,2,2,2,2,0,2,2,2,2},
                    new[] {7,7,4,7,7,7,10,6,6,6,6,7,6,6,6,7,7,7,7,8,7,7,7,7,2,3,2,4,4,3,5,5,5,3,3,7,7,6,7,7,4,4,4,4,3,3,3,3,2,2,2,2,2,2,0,2,2,2},
                    new[] {6,6,4,7,7,7,11,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,2,3,2,4,4,4,5,5,5,3,3,7,7,7,7,7,7,5,5,6,4,4,4,3,3,2,3,2,2,2,2,0,2,2},
                    new[] {7,5,4,7,6,6,8,4,5,5,5,4,2,4,5,4,4,3,5,3,4,3,5,3,5,5,5,3,5,7,5,6,6,8,8,5,3,3,6,3,4,3,2,3,3,2,2,3,3,3,3,2,2,2,2,2,0,2},
                    new[] {8,8,4,8,8,8,9,2,4,5,15,6,7,7,7,5,7,9,12,6,5,6,12,5,5,5,17,15,14,13,9,8,17,3,4,20,20,6,12,15,5,3,2,9,5,7,8,6,6,6,2,2,2,2,2,2,2,0}
                }
            };

            //Distance matrix, 5x5, used to represent distances
            //Between cities. 0,1 represents distance between cities 0 and 1, and so on.

            //int[] currSolution = { 0, 1, 2, 3, 4, 0 };   //initial solution
                                                         //city numbers start from 0
                                                         // the first and last cities' positions do not change

            var numberOfIterations = 100;
            var tabuLength = 10;
            TabuList tabuList = new TabuList(tabuLength);

            BestSol = new int[currSolution.Length]; //this is the best Solution So Far
            BestSol = Arraycopy(currSolution, 0, 0, BestSol.Length);
            int bestCost = _tspEnvironment2.GetObjectiveFunctionValue(BestSol);

            for (int i = 0; i < numberOfIterations; i++)
            { // perform iterations here

                currSolution = GetBestNeighbour(tabuList, _tspEnvironment2, currSolution);

                int currCost = _tspEnvironment2.GetObjectiveFunctionValue(currSolution);

                if (currCost < bestCost)
                {
                    BestSol = Arraycopy(currSolution, 0, 0, BestSol.Length);
                    bestCost = currCost;
                }
            }
        }

        private static int[] Arraycopy(IReadOnlyList<int> currSolution, int positionDepart, int debut, int fin)
        {
            var result = new int[currSolution.Count];
            for (var i = 0; i < fin; i++)
            {
                result[i] = currSolution[i + debut];
            }
            return result;
        }
    }
}